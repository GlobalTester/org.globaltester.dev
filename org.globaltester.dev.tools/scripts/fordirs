#!/bin/bash
if [ $# -eq 0 ]
then
	printHelp
fi

# parameter handling
GIT_ONLY='[ -d ".git" ]'
RETRY=1
MAX_RETRIES=0
QUIET=0
CONDITION=
DIRS=*/

function printHelp {
	echo -e "Usage:\n"
	echo -e "`basename $0` <options> [--] <toBeExecuted>\n"
	echo -e ""
	echo -e "This executes the given commands and parameters in each subfolder."
	echo -e "-- can be used to separate commands that equal an parameter"
	echo
	echo "-a  | --aggrgator             Only operate on repositories mentioned in the given aggregator"
	echo "                               This takes a repo name as argument and highly relies on the secunet conventions wrt directories and pom structure"
	echo "-c  | --condition             Only operate on directories in which the condition evaluates to 0"
	echo "                               This takes a single string to be evaluated as bash code"
	echo "-g  | --git-only              Only operate on directories containing a .git folder"
	echo "                               This sets --condition to $GIT_ONLY"
	echo "-m  | --max-retries           set maximal retries for each commandline (-1 for no limit)"
	echo "-u  | --unlimited-retries     shortcut for --max-retries -1"
	echo "-q  | --quiet                 do not add output on stdout additional to <toBeExecuted> outputs"
	echo "-h  | --help                  display this help"
	
	exit 1
}

PARSING_DONE=0
while [ $# -gt 0 -a $PARSING_DONE -ne 1 ]
do
	case "$1" in
		"-h"|"--help")
			printHelp
		;;
		"-c"|"--condition")
			if [[ -z "$2" ]]
			then
				echo "Condition is missing!"
				exit 1
			fi
			CONDITION="$2"
			shift 2
		;;
		"-g"|"--git-only")
			CONDITION="$GIT_ONLY"
			shift 1
		;;
		"-a"|"--aggregator")
			if [[ -z "$2" ]]
			then
				echo "Aggregator is missing!"
				exit 1
			fi

			set -e
			. org.globaltester.dev/org.globaltester.dev.tools/scripts/helper.sh

			DIRS=`getRepositoriesFromAggregator $2/$2.releng/pom.xml`
			shift 2
		;;
		"-q"|"--quiet")
			QUIET=1
			shift 1
		;;
		"-u"|"--unlimited-retries")
			MAX_RETRIES=-1
			shift 1
		;;
		"-m"|"--max-retries")
			if [[ -z "$2" ]]
			then
				echo "Retry count is missing!"
				exit 1
			fi
			MAX_RETRIES=$2
			shift 2
		;;
		"--")
			PARSING_DONE=1
			shift 1
		;;
		*)
			PARSING_DONE=1
		;;
	esac
done


RETRIES=0
FAILURES=
SKIPPED=

for curProj in $DIRS
do
	cd "$curProj"
	eval "$CONDITION"
	RETURN=$?
	if [ ! -z "$CONDITION" -a $RETURN -eq 1 ]
	then
		SKIPPED=`echo -en "$SKIPPED\n$curProj"`
		cd ..
		continue
	fi
	
	if [ $QUIET -eq 0 ]
	then
	echo -en "\e[36m" ; pwd; echo -en "\e[0m";
	fi
	
	eval "$@"
	
	RETURN=$?
	if [ $RETURN -ne 0 ]
	then
		FAILURES=`echo -en "$FAILURES\n$curProj"`
	fi
	CURRENT_RETRIES=0
	while [ $RETURN -ne 0 ] && [ $MAX_RETRIES -gt $CURRENT_RETRIES -o $MAX_RETRIES -eq "-1" ]
	do
		if [ $QUIET -eq 0 ]
		then
			echo -en "\e[31m"
			echo Retrying $curProj ...
			echo -en "\e[0m"
		fi
		((RETRIES++))
		((CURRENT_RETRIES++))
		eval "$@"
		RETURN=$?
	done;
	cd ..
done

echo -en "\n\n"

	
if [ $RETRIES -ne 0 -a $QUIET -eq 0 ]
then
	echo Retries done: $RETRIES
	echo
fi

if [ ! -z "$SKIPPED" -a $QUIET -eq 0 ]
then
	echo 'Skipped directories'
	echo "$SKIPPED"
	echo
fi

if [ ! -z "$FAILURES" -a $QUIET -eq 0 ]
then
	echo 'Directories with != 0 return code:'
	echo "$FAILURES"
fi
